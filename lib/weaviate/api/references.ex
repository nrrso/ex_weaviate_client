# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Weaviate.Api.References do
  @moduledoc """
  API calls for all endpoints tagged `References`.
  """

  alias Weaviate.Connection
  import Weaviate.RequestBuilder

  @doc """
  Creates new Cross-References between arbitrary classes in bulk.
  Register cross-references between any class items (objects or objects) in bulk.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `body` ([Weaviate.Model.BatchReference.t]): A list of references to be batched. The ideal size depends on the used database connector. Please see the documentation of the used connector for help
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful

  ### Returns

  - `{:ok, [%BatchReferenceResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_references_create(Tesla.Env.client, list(Weaviate.Model.BatchReference.t), keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.BatchReferenceResponse.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def batch_references_create(connection, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/batch/references")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BatchReferenceResponse},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end
end
