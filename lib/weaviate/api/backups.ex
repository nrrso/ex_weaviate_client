# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Weaviate.Api.Backups do
  @moduledoc """
  API calls for all endpoints tagged `Backups`.
  """

  alias Weaviate.Connection
  import Weaviate.RequestBuilder

  @doc """
  Starts a process of creating a backup for a set of classes

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `backend` (String.t): Backup backend name e.g. filesystem, gcs, s3.
  - `body` (BackupCreateRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.BackupCreateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec backups_create(Tesla.Env.client, String.t, Weaviate.Model.BackupCreateRequest.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.BackupCreateResponse.t} | {:error, Tesla.Env.t}
  def backups_create(connection, backend, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/backups/#{backend}")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BackupCreateResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Returns status of backup creation attempt for a set of classes

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `backend` (String.t): Backup backend name e.g. filesystem, gcs, s3.
  - `id` (String.t): The ID of a backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.BackupCreateStatusResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec backups_create_status(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.BackupCreateStatusResponse.t} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def backups_create_status(connection, backend, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/backups/#{backend}/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BackupCreateStatusResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Starts a process of restoring a backup for a set of classes

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `backend` (String.t): Backup backend name e.g. filesystem, gcs, s3.
  - `id` (String.t): The ID of a backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
  - `body` (BackupRestoreRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.BackupRestoreResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec backups_restore(Tesla.Env.client, String.t, String.t, Weaviate.Model.BackupRestoreRequest.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.BackupRestoreResponse.t} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def backups_restore(connection, backend, id, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/backups/#{backend}/#{id}/restore")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BackupRestoreResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Returns status of a backup restoration attempt for a set of classes

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `backend` (String.t): Backup backend name e.g. filesystem, gcs, s3.
  - `id` (String.t): The ID of a backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.BackupRestoreStatusResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec backups_restore_status(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.BackupRestoreStatusResponse.t} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def backups_restore_status(connection, backend, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/backups/#{backend}/#{id}/restore")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BackupRestoreStatusResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end
end
