# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Weaviate.Api.Schema do
  @moduledoc """
  API calls for all endpoints tagged `Schema`.
  """

  alias Weaviate.Connection
  import Weaviate.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.SchemaClusterStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_cluster_status(Tesla.Env.client, keyword()) :: {:ok, Weaviate.Model.SchemaClusterStatus.t} | {:error, Tesla.Env.t}
  def schema_cluster_status(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/schema/cluster-status")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.SchemaClusterStatus},
      {500, Weaviate.Model.SchemaClusterStatus}
    ])
  end

  @doc """
  Dump the current the database schema.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.Schema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_dump(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Schema.t} | {:error, Tesla.Env.t}
  def schema_dump(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/schema")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Schema},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Create a new Object class in the schema.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `object_class` (Class): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.Class.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_create(Tesla.Env.client, Weaviate.Model.Class.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Class.t} | {:error, Tesla.Env.t}
  def schema_objects_create(connection, object_class, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/schema")
      |> add_param(:body, :body, object_class)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Class},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Remove an Object class (and all data in the instances) from the schema.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def schema_objects_delete(connection, class_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/schema/#{class_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Get a single class from the schema

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.Class.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Class.t} | {:error, Tesla.Env.t}
  def schema_objects_get(connection, class_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/schema/#{class_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Class},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Add a property to an Object class.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `body` (Property): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.Property.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_properties_add(Tesla.Env.client, String.t, Weaviate.Model.Property.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Property.t} | {:error, Tesla.Env.t}
  def schema_objects_properties_add(connection, class_name, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/schema/#{class_name}/properties")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Property},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Get the shards status of an Object class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:tenant` (String.t): 

  ### Returns

  - `{:ok, [%ShardStatusGetResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_shards_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.ShardStatusGetResponse.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def schema_objects_shards_get(connection, class_name, opts \\ []) do
    optional_params = %{
      :tenant => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/schema/#{class_name}/shards")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.ShardStatusGetResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update shard status of an Object Class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `shard_name` (String.t): 
  - `body` (ShardStatus): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.ShardStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_shards_update(Tesla.Env.client, String.t, String.t, Weaviate.Model.ShardStatus.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ShardStatus.t} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def schema_objects_shards_update(connection, class_name, shard_name, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/schema/#{class_name}/shards/#{shard_name}")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.ShardStatus},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update settings of an existing schema class
  Use this endpoint to alter an existing class in the schema. Note that not all settings are mutable. If an error about immutable fields is returned and you still need to update this particular setting, you will have to delete the class (and the underlying data) and recreate. This endpoint cannot be used to modify properties. Instead use POST /v1/schema/{className}/properties. A typical use case for this endpoint is to update configuration, such as the vectorIndexConfig. Note that even in mutable sections, such as vectorIndexConfig, some fields may be immutable.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `object_class` (Class): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Weaviate.Model.Class.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schema_objects_update(Tesla.Env.client, String.t, Weaviate.Model.Class.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Class.t} | {:error, Tesla.Env.t}
  def schema_objects_update(connection, class_name, object_class, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/schema/#{class_name}")
      |> add_param(:body, :body, object_class)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Class},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Create a new tenant for a specific class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `body` ([Weaviate.Model.Tenant.t]): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Tenant{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_create(Tesla.Env.client, String.t, list(Weaviate.Model.Tenant.t), keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.Tenant.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def tenants_create(connection, class_name, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/schema/#{class_name}/tenants")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Tenant},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  delete tenants from a specific class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `tenants` ([String.t]): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_delete(Tesla.Env.client, String.t, list(String.t), keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def tenants_delete(connection, class_name, tenants, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/schema/#{class_name}/tenants")
      |> add_param(:body, :body, tenants)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  get all tenants from a specific class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Tenant{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.Tenant.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def tenants_get(connection, class_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/schema/#{class_name}/tenants")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Tenant},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update tenant of a specific class

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `body` ([Weaviate.Model.Tenant.t]): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Tenant{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_update(Tesla.Env.client, String.t, list(Weaviate.Model.Tenant.t), keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.Tenant.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def tenants_update(connection, class_name, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/schema/#{class_name}/tenants")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Tenant},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end
end
