# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Weaviate.Api.Objects do
  @moduledoc """
  API calls for all endpoints tagged `Objects`.
  """

  alias Weaviate.Connection
  import Weaviate.RequestBuilder

  @doc """
  Creates new Objects based on a Object template as a batch.
  Register new Objects in bulk. Provided meta-data and schema values are validated.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `body` (BatchObjectsCreateRequest): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful

  ### Returns

  - `{:ok, [%ObjectsGetResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_objects_create(Tesla.Env.client, Weaviate.Model.BatchObjectsCreateRequest.t, keyword()) :: {:ok, nil} | {:ok, list(Weaviate.Model.ObjectsGetResponse.t)} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def batch_objects_create(connection, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/batch/objects")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.ObjectsGetResponse},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Deletes Objects based on a match filter as a batch.
  Delete Objects in bulk that match a certain filter.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `body` (BatchDelete): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, Weaviate.Model.BatchDeleteResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec batch_objects_delete(Tesla.Env.client, Weaviate.Model.BatchDelete.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.BatchDeleteResponse.t} | {:error, Tesla.Env.t}
  def batch_objects_delete(connection, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/batch/objects")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.BatchDeleteResponse},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete object based on its class and UUID.
  Delete a single data object.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_delete(connection, class_name, id, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/objects/#{class_name}/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Get a specific Object based on its class and UUID. Also available as Websocket bus.
  Get a single data object

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters
    - `:include` (String.t): Include additional information, such as classification infos. Allowed values include: classification, vector, interpretation
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:node_name` (String.t): The target node which should fulfill the request
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, Weaviate.Model.Object.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Object.t} | {:error, Tesla.Env.t}
  def objects_class_get(connection, class_name, id, opts \\ []) do
    optional_params = %{
      :include => :query,
      :consistency_level => :query,
      :node_name => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/objects/#{class_name}/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Object},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Checks object's existence based on its class and uuid.
  Checks if a data object exists without retrieving it.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): The class name as defined in the schema
  - `id` (String.t): The uuid of the data object
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_head(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_head(connection, class_name, id, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:head)
      |> url("/objects/#{class_name}/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update an Object based on its UUID (using patch semantics).
  Update an individual data object based on its class and uuid. This method supports json-merge style patch semantics (RFC 7396). Provided meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): The class name as defined in the schema
  - `id` (String.t): The uuid of the data object to update.
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:body` (Object): RFC 7396-style patch, the body contains the object to merge into the existing object.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_patch(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_patch(connection, class_name, id, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/objects/#{class_name}/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update a class object based on its uuid
  Update an individual data object based on its class and uuid.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): 
  - `id` (String.t): The uuid of the data object to update.
  - `body` (Object): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful

  ### Returns

  - `{:ok, Weaviate.Model.Object.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_put(Tesla.Env.client, String.t, String.t, Weaviate.Model.Object.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Object.t} | {:error, Tesla.Env.t}
  def objects_class_put(connection, class_name, id, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/objects/#{class_name}/#{id}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Object},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Add a single reference to a class-property.
  Add a single reference to a class-property.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): The class name as defined in the schema
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` (SingleRef): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_references_create(Tesla.Env.client, String.t, String.t, String.t, Weaviate.Model.SingleRef.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_references_create(connection, class_name, id, property_name, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/objects/#{class_name}/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete the single reference that is given in the body from the list of references that this property has.
  Delete the single reference that is given in the body from the list of references that this property of a data object has

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): The class name as defined in the schema
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` (SingleRef): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_references_delete(Tesla.Env.client, String.t, String.t, String.t, Weaviate.Model.SingleRef.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_references_delete(connection, class_name, id, property_name, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/objects/#{class_name}/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Replace all references to a class-property.
  Update all references of a property of a data object.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `class_name` (String.t): The class name as defined in the schema
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` ([Weaviate.Model.SingleRef.t]): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_class_references_put(Tesla.Env.client, String.t, String.t, String.t, list(Weaviate.Model.SingleRef.t), keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_class_references_put(connection, class_name, id, property_name, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/objects/#{class_name}/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Objects between two Objects (object and subject).
  Registers a new Object. Provided meta-data and schema values are validated.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `body` (Object): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful

  ### Returns

  - `{:ok, Weaviate.Model.Object.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_create(Tesla.Env.client, Weaviate.Model.Object.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Object.t} | {:error, Tesla.Env.t}
  def objects_create(connection, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/objects")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Object},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete an Object based on its UUID.
  Deletes an Object from the system.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_delete(connection, id, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/objects/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Get a specific Object based on its UUID and a Object UUID. Also available as Websocket bus.
  Lists Objects.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters
    - `:include` (String.t): Include additional information, such as classification infos. Allowed values include: classification, vector, interpretation

  ### Returns

  - `{:ok, Weaviate.Model.Object.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Object.t} | {:error, Tesla.Env.t}
  def objects_get(connection, id, opts \\ []) do
    optional_params = %{
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/objects/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Object},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Checks Object's existence based on its UUID.
  Checks if an Object exists in the system.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_head(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_head(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:head)
      |> url("/objects/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Get a list of Objects.
  Lists all Objects in reverse order of creation, owned by the user that belongs to the used token.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:after` (String.t): The starting ID of the result window.
    - `:offset` (integer()): The starting index of the result window. Default value is 0.
    - `:limit` (integer()): The maximum number of items to be returned per page. Default value is set in Weaviate config.
    - `:include` (String.t): Include additional information, such as classification infos. Allowed values include: classification, vector, interpretation
    - `:sort` (String.t): Sort parameter to pass an information about the names of the sort fields
    - `:order` (String.t): Order parameter to tell how to order (asc or desc) data within given field
    - `:class` (String.t): Class parameter specifies the class from which to query objects
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, Weaviate.Model.ObjectsListResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_list(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.ObjectsListResponse.t} | {:error, Tesla.Env.t}
  def objects_list(connection, opts \\ []) do
    optional_params = %{
      :after => :query,
      :offset => :query,
      :limit => :query,
      :include => :query,
      :sort => :query,
      :order => :query,
      :class => :query,
      :tenant => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/objects")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.ObjectsListResponse},
      {400, Weaviate.Model.ErrorResponse},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update an Object based on its UUID (using patch semantics).
  Updates an Object. This method supports json-merge style patch semantics (RFC 7396). Provided meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful
    - `:body` (Object): RFC 7396-style patch, the body contains the object to merge into the existing object.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_patch(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_patch(connection, id, opts \\ []) do
    optional_params = %{
      :consistency_level => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/objects/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Add a single reference to a class-property.
  Add a single reference to a class-property.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` (SingleRef): 
  - `opts` (keyword): Optional parameters
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_references_create(Tesla.Env.client, String.t, String.t, Weaviate.Model.SingleRef.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_references_create(connection, id, property_name, body, opts \\ []) do
    optional_params = %{
      :tenant => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/objects/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete the single reference that is given in the body from the list of references that this property has.
  Delete the single reference that is given in the body from the list of references that this property has.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` (SingleRef): 
  - `opts` (keyword): Optional parameters
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_references_delete(Tesla.Env.client, String.t, String.t, Weaviate.Model.SingleRef.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_references_delete(connection, id, property_name, body, opts \\ []) do
    optional_params = %{
      :tenant => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/objects/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Replace all references to a class-property.
  Replace all references to a class-property.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `property_name` (String.t): Unique name of the property related to the Object.
  - `body` ([Weaviate.Model.SingleRef.t]): 
  - `opts` (keyword): Optional parameters
    - `:tenant` (String.t): Specifies the tenant in a request targeting a multi-tenant class

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_references_update(Tesla.Env.client, String.t, String.t, list(Weaviate.Model.SingleRef.t), keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_references_update(connection, id, property_name, body, opts \\ []) do
    optional_params = %{
      :tenant => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/objects/#{id}/references/#{property_name}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Update an Object based on its UUID.
  Updates an Object's data. Given meta-data and schema values are validated. LastUpdateTime is set to the time this function is called.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `id` (String.t): Unique ID of the Object.
  - `body` (Object): 
  - `opts` (keyword): Optional parameters
    - `:consistency_level` (String.t): Determines how many replicas must acknowledge a request before it is considered successful

  ### Returns

  - `{:ok, Weaviate.Model.Object.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_update(Tesla.Env.client, String.t, Weaviate.Model.Object.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:ok, Weaviate.Model.Object.t} | {:error, Tesla.Env.t}
  def objects_update(connection, id, body, opts \\ []) do
    optional_params = %{
      :consistency_level => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/objects/#{id}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Weaviate.Model.Object},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {404, false},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end

  @doc """
  Validate an Object based on a schema.
  Validate an Object's schema and meta-data. It has to be based on a schema, which is related to the given Object to be accepted by this validation.

  ### Parameters

  - `connection` (Weaviate.Connection): Connection to server
  - `body` (Object): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec objects_validate(Tesla.Env.client, Weaviate.Model.Object.t, keyword()) :: {:ok, nil} | {:ok, Weaviate.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def objects_validate(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/objects/validate")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, Weaviate.Model.ErrorResponse},
      {422, Weaviate.Model.ErrorResponse},
      {500, Weaviate.Model.ErrorResponse}
    ])
  end
end
